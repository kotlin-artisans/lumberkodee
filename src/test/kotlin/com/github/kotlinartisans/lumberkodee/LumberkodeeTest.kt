/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.github.kotlinartisans.lumberkodee

import io.mockk.every
import io.mockk.mockk
import io.mockk.verify
import kotlin.test.Test

class LumberkodeeTest {

    @Test
    fun logsInfoMessageIfClientSupportsInfoLevel() {
        val client = mockk<LumberkodeeClient>(relaxed = true)
        val message = "this message should be logged"
        val extras = EMPTY_EXTRAS

        every { client.supports(LogLevel.INFO) } returns true
        putLumberkodeeToWork(arrayListOf(client))

        logInfo(message)

        verify {
            client.info(message, extras)
        }
    }

    @Test
    fun doesNotLogInfoMessageIfClientDoesNotSupportInfoLevel() {
        val client = mockk<LumberkodeeClient>(relaxed = true)
        val message = "this message should not be logged"
        val extras = EMPTY_EXTRAS

        every { client.supports(LogLevel.INFO) } returns false
        putLumberkodeeToWork(arrayListOf(client))

        logInfo(message)

        verify(exactly = 0) {
            client.info(message, extras)
        }
    }

    @Test
    fun logsWarningMessageIfClientSupportsWarningLevel() {
        val client = mockk<LumberkodeeClient>(relaxed = true)
        val message = "this message should be logged"
        val extras = EMPTY_EXTRAS

        every { client.supports(LogLevel.WARNING) } returns true
        putLumberkodeeToWork(arrayListOf(client))

        logWarning(message)

        verify {
            client.warning(message, extras)
        }
    }

    @Test
    fun doesNotLogWarningMessageIfClientDoesNotSupportWarningLevel() {
        val client = mockk<LumberkodeeClient>(relaxed = true)
        val message = "this message should not be logged"
        val extras = EMPTY_EXTRAS

        every { client.supports(LogLevel.WARNING) } returns false
        putLumberkodeeToWork(arrayListOf(client))

        logWarning(message)

        verify(exactly = 0) {
            client.warning(message, extras)
        }
    }

    @Test
    fun logsErrorMessageIfClientSupportsErrorLevel() {
        val client = mockk<LumberkodeeClient>(relaxed = true)
        val message = "this message should be logged"
        val throwable = Throwable("something bad happened")
        val extras = EMPTY_EXTRAS

        every { client.supports(LogLevel.ERROR) } returns true
        putLumberkodeeToWork(arrayListOf(client))

        logError(message, throwable)

        verify {
            client.error(message, throwable, extras)
        }
    }

    @Test
    fun doesNotLogErrorMessageIfClientDoesNotSupportErrorLevel() {
        val client = mockk<LumberkodeeClient>(relaxed = true)
        val message = "this message should not be logged"
        val throwable = Throwable("something bad happened")
        val extras = EMPTY_EXTRAS

        every { client.supports(LogLevel.ERROR) } returns false
        putLumberkodeeToWork(arrayListOf(client))

        logError(message, throwable)

        verify(exactly = 0) {
            client.error(message, throwable, extras)
        }
    }

    @Test
    fun logsDebugMessageIfClientSupportsDebugLevel() {
        val client = mockk<LumberkodeeClient>(relaxed = true)
        val message = "this message should be logged"
        val extras = EMPTY_EXTRAS

        every { client.supports(LogLevel.DEBUG) } returns true
        putLumberkodeeToWork(arrayListOf(client))

        logDebug(message)

        verify {
            client.debug(message, extras)
        }
    }

    @Test
    fun doesNotLogDebugMessageIfClientDoesNotSupportDebugLevel() {
        val client = mockk<LumberkodeeClient>(relaxed = true)
        val message = "this message should not be logged"
        val extras = EMPTY_EXTRAS

        every { client.supports(LogLevel.DEBUG) } returns false
        putLumberkodeeToWork(arrayListOf(client))

        logDebug(message)

        verify(exactly = 0) {
            client.debug(message, extras)
        }
    }

    @Test
    fun logsVerboseMessageIfClientSupportsVerboseLevel() {
        val client = mockk<LumberkodeeClient>(relaxed = true)
        val message = "this message should be logged"
        val extras = EMPTY_EXTRAS

        every { client.supports(LogLevel.VERBOSE) } returns true
        putLumberkodeeToWork(arrayListOf(client))

        logVerbose(message)

        verify {
            client.verbose(message, extras)
        }
    }

    @Test
    fun doesNotLogVerboseMessageIfClientDoesNotSupportVerboseLevel() {
        val client = mockk<LumberkodeeClient>(relaxed = true)
        val message = "this message should not be logged"
        val extras = EMPTY_EXTRAS

        every { client.supports(LogLevel.VERBOSE) } returns false
        putLumberkodeeToWork(arrayListOf(client))

        logVerbose(message)

        verify(exactly = 0) {
            client.verbose(message, extras)
        }
    }
}
